---
## Author
author:
  name: Лобанова Екатерина Евгеньевна
  studID: 1032252596
  group: НПИбд-01-25
  email: 1032252596@pfur.ru
  affiliation:
    - name: Российский университет дружбы народов
      country: Российская Федерация
      postal-code: 117198
      city: Москва
      address: ул. Миклухо-Маклая, д. 6

## Title
title: "Отчёт по лабораторной работе 4"
license: "CC BY"
---

#1. Цель работы

Освоение процедуры компиляции и сборки программ, написанных на ассемблере NASM.

#2. Порядок выполнения лабораторной работы

##2.1 Программа Hello world!
Создаем каталог для работы с программами на языке ассемблера NASM и переходим в созданный каталог ([рис. @fig-001]).

![Рис 1](./image/5469733339738011588.jpg){#fig-001 width=70%}

Создаем текстовый файл с именем hello.asm ([рис. @fig-002]).

![Рис 2](./image/5469733339738011590.jpg){#fig-002 width=70%}

Откроем  этот файл с помощью любого текстового редактора, например nano и введем заданный текст

([рис. @fig-003]).

([рис. @fig-004]).

![Рис 3](./image/5469733339738011623.jpg){#fig-003 width=70%}

![Рис 4](./image/5469733339738011592.jpg){#fig-004 width=70%}

##2.2 Транслятор NASM

NASM превращает текст программы в объектный код. Например, для компиляции приведённого выше текста программы «Hello World» напишем: nasm -f elf hello.asm ([рис. @fig-005]).

![Рис 5](./image/5469733339738011594.jpg){#fig-005 width=70%}

Если текст программы набран без ошибок, то транслятор преобразует текст программы из файла hello.asm в объектный код, который запишется в файл hello.o. С помощью команды ls проверьте, что объектный файл был создан. Объектный файл имеет название hello ([рис. @fig-006]).

![Рис 6](./image/5469733339738011595.jpg){#fig-006 width=70%}

##2.3 Расширенный синтаксис командной строки NASM

Полный вариант командной строки nasm выглядит следующим образом: nasm [-@ косвенный_файл_настроек] [-o объектный_файл] [-f ↪ формат_объектного_файла] [-l листинг] [параметры...] [--] исходный_файл
Выполним команду. Рис 1.7
Данная команда компилирует исходный файл hello.asm в obj.o (опция -o позволяет задать имя объектного файла, в данном случае obj.o), при этом формат выходного файла получается elf, и в него будут включены символы для отладки (опция -g), кроме того, будет создан файл листинга list.lst (опция -l). 
С помощью команды ls проверим, что файлы были созданы ([рис. @fig-007]).

![Рис 7](./image/5469733339738011596.jpg){#fig-007 width=70%}

##2.4 Компоновщик LD

Чтобы получить исполняемую программу, объектный файл необходимо передать на обработку компоновщику. С помощью команды ls проверим, что исполняемый файл hello был создан ([рис. @fig-008]).

![Рис 8](./image/5469733339738011597.jpg){#fig-008 width=70%}

Ключ -o с последующим значением задаёт в данном случае имя создаваемого исполняемого файла. Выполним команду ([рис. @fig-009]).

![Рис 9](./image/5469733339738011598.jpg){#fig-009 width=70%}

Исполняемый файл имеет имя main, а объектный файл имя obj.o

##2.5 Запуск исполняемого файла

Запустить на выполнение созданный исполняемый файл, находящийся в текущем каталоге, можно, набрав в командной строке: ./hello ([рис. @fig-010]).

![Рис 10](./image/5469733339738011599.jpg){#fig-010 width=70%}

#3. Задание для самостоятельной работы

В каталоге ~/work/arch-pc/lab04 с помощью команды cp создайте копию файла hello.asm с именем lab4.asm ([рис. @fig-011]).

![Рис 11](./image/5469733339738011600.jpg){#fig-011 width=70%}

С помощью любого текстового редактора внесите изменения в текст программы в файле lab4.asm так, чтобы вместо Hello world! на экран выводилась строка с вашими фамилией и именем 
([рис. @fig-012])

([рис. @fig-013])

![Рис 12](./image/5469733339738011601.jpg){#fig-012 width=70%}

![Рис 13](./image/5469733339738011602.jpg){#fig-013 width=70%}

Оттранслируйте полученный текст программы lab4.asm в объектный файл. Выполните компоновку объектного файла и запустите получившийся исполняемый файл ([рис. @fig-014]).

![Рис 14](./image/5469733339738011603.jpg){#fig-014 width=70%}

Скопируйте файлы hello.asm и lab4.asm в Ваш локальный репозиторий в каталог ~/work/study/2023-2024/"Архитектура компьютера"/arch-pc/labs/lab04/. Загрузите файлы на Github 
([рис. @fig-015])

([рис. @fig-015]) 

([рис. @fig-017])

![Рис 15](./image/5469733339738011604.jpg){#fig-015 width=70%}

![Рис 16](./image/5469733339738011605.jpg){#fig-016 width=70%}

![Рис 17](./image/5469733339738011606.jpg){#fig-017 width=70%}
# Выводы

В ходе лабораторной работы были изучены основы работы с ассемблером NASM в операционной системе Linux. Приобретены практические навыки написания, трансляции и выполнения низкоуровневых программ на языке ассемблера.



# Список литературы{.unnumbered}

::: {#refs}
:::
